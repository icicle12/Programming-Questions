/* MAX Profit Problem
Suppose we could access yesterday's stock prices as a list, where:

The indices are the time in minutes past trade opening time, which was 9:30am local time.
The values are the price in dollars of Apple stock at that time.
So if the stock cost $500 at 10:30am, stock_prices_yesterday[60] = 500.

Write an efficient function that takes stock_prices_yesterday and returns the best profit I could have made from 
1 purchase and 1 sale of 1 Apple stock yesterday.
*/
import java.lang.Object;

public class stock {
  public Object price;
  public Object time;
  
  public stock (int stockPrice, int stockTime) {
    price = stockPrice;
    time = stockTime;
  }
}

public class MAX_Profit {
  
  public int Profit (int [] stockPrices) {
    ArrayList<int> min = new ArrayList<int> ();
    ArrayList<int> max = new ArrayList<int> ();
    
    /*for (int i = 0; i < stockPrices.length; i++) {
      if (i = 0) {
        
      }
    }*/
  }
  
  public static void main (String [] args) {
    ArrayList<int> min = new ArrayList<int> ();
    min [0] = 1;
    System.out.println ("" + min [0]);
  }
}
